# .github/workflows/ci‑cd.yml
name: CI‑CD
on: { push: { branches: [ main ] }, pull_request: { branches: [ main ] } }
#######################################
# VARIABILI COMUNI
#######################################
env:
  AWS_REGION:   ${{ secrets.AWS_REGION }}
  ECR_REPO:     ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/hammurabi-ui-prod
  STACK_NAME:   ReactCdkCompleteStack          # se cambi lo stack, modificalo qui
jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: CI
    permissions: { id-token: write, contents: read }
    steps:
    #---------------------------------------------------------------
    # 1) Checkout + credenziali + login ECR
    #---------------------------------------------------------------
    - uses: actions/checkout@v4
    - uses: aws-actions/configure-aws-credentials@v2
      with:
        role-to-assume: ${{ secrets.GH_OIDC_ROLE_ARN }}
        aws-region:     ${{ env.AWS_REGION }}
    - uses: aws-actions/amazon-ecr-login@v1
    #---------------------------------------------------------------
    # 2) Build & push immagine
    #---------------------------------------------------------------
    - name: Build & push Docker
      id: build
      run: |
        set -euo pipefail
        TAG=$(git rev-parse --short HEAD)
        docker build -t $ECR_REPO:$TAG \
                     --build-arg VERSION_INFO=$TAG \
                     Hammurabi/hammurabi-ui
        docker push $ECR_REPO:$TAG
        echo "tag=$TAG" >> "$GITHUB_OUTPUT"
    #---------------------------------------------------------------
    # 3) Toolchain (Node, CDK, pip)
    #---------------------------------------------------------------
    - uses: actions/setup-node@v4
      with: { node-version: 20 }
    - run: npm install -g aws-cdk@2
    - run: pip3 install -r hammurabi-cdk/requirements.txt
    #---------------------------------------------------------------
    # 4) Google OAuth secrets → file locale
    #---------------------------------------------------------------
    - name: Inject Google OAuth secrets
      run: |
        cat > hammurabi-cdk/react_ecs_complete_cdk/google_secrets.json <<'EOF'
        {
          "web": {
            "client_id":    "${{ secrets.GOOGLE_CLIENT_ID }}",
            "client_secret":"${{ secrets.GOOGLE_CLIENT_SECRET }}"
          }
        }
        EOF
    #---------------------------------------------------------------
    # 5) CDK deploy (infra)
    #---------------------------------------------------------------
    - name: CDK deploy (infra only)
      run: |
        cd hammurabi-cdk
        cdk deploy $STACK_NAME \
          -c imageTag=${{ steps.build.outputs.tag }} \
          --require-approval never
    #---------------------------------------------------------------
    # 6) jq
    #---------------------------------------------------------------
    - name: Install jq
      run: sudo apt-get update -y && sudo apt-get install -y jq
    #---------------------------------------------------------------
    # 7) Risolvi cluster, service, family
    #---------------------------------------------------------------
    - name: Resolve ECS resources
      id: resolve
      env:
        AWS_REGION: ${{ env.AWS_REGION }}
        IMAGE_TAG:  ${{ steps.build.outputs.tag }}
      run: |
        set -euo pipefail
        
        # ---------- Debug All Clusters ----------
        echo "Listing all available ECS clusters:"
        aws ecs list-clusters --region "$AWS_REGION"
        
        # ---------- Get the first cluster (most deployments have only one) ----------
        CLUSTER_ARN=$(aws ecs list-clusters --region "$AWS_REGION" \
          --query "clusterArns[0]" \
          --output text)
        
        [[ -z "$CLUSTER_ARN" || "$CLUSTER_ARN" == "None" ]] && \
          { echo "::error ::No ECS clusters found in the account"; exit 1; }
        
        # Extract cluster name properly from ARN
        CLUSTER_NAME=$(echo "$CLUSTER_ARN" | awk -F'/' '{print $NF}')
        echo "Found cluster: $CLUSTER_NAME ($CLUSTER_ARN)"
        
        # ---------- Debug All Services in the Cluster ----------
        echo "Listing all services in cluster $CLUSTER_NAME:"
        aws ecs list-services --cluster "$CLUSTER_NAME" --region "$AWS_REGION"
        
        # ---------- Get the first service in the cluster ----------
        SERVICE_ARN=$(aws ecs list-services --cluster "$CLUSTER_NAME" \
          --region "$AWS_REGION" \
          --query "serviceArns[0]" \
          --output text)
        
        [[ -z "$SERVICE_ARN" || "$SERVICE_ARN" == "None" ]] && \
          { echo "::error ::No ECS services found in cluster $CLUSTER_NAME"; exit 1; }
        
        # Extract service name properly from ARN
        SERVICE_NAME=$(echo "$SERVICE_ARN" | awk -F'/' '{print $NF}')
        echo "Found service: $SERVICE_NAME ($SERVICE_ARN)"
        
        # ---------- Task‑definition family -------------------------
        echo "Getting task definition for service $SERVICE_NAME:"
        TASK_DEF_ARN=$(aws ecs describe-services \
            --cluster "$CLUSTER_NAME" \
            --services "$SERVICE_NAME" \
            --query 'services[0].taskDefinition' \
            --output text --region "$AWS_REGION")
            
        echo "Task definition ARN: $TASK_DEF_ARN"
        
        FAMILY=$(echo "$TASK_DEF_ARN" | awk -F'/' '{print $NF}' | awk -F':' '{print $1}')
        echo "Extracted family: $FAMILY"
        
        # ---------- Outputs per gli step dopo ----------------------
        {
          echo "cluster_name=$CLUSTER_NAME"
          echo "cluster_arn=$CLUSTER_ARN"
          echo "service_name=$SERVICE_NAME"
          echo "family=$FAMILY"
        } >> "$GITHUB_OUTPUT"
        
        # ---------- Summary ----------
        echo "Resolved CLUSTER_NAME: $CLUSTER_NAME"
        echo "Resolved SERVICE_NAME: $SERVICE_NAME"
        echo "Resolved FAMILY: $FAMILY"

    #---------------------------------------------------------------
    # 7‑cd) Risolvi CodeDeploy Application & Deployment Group
    #---------------------------------------------------------------
    - name: Resolve CodeDeploy resources
      id: cd
      env:
        AWS_REGION: ${{ env.AWS_REGION }}
        STACK_NAME: ${{ env.STACK_NAME }}
      run: |
        set -euo pipefail
        APP=$(aws cloudformation describe-stack-resources \
              --stack-name "$STACK_NAME" \
              --query "StackResources[?LogicalResourceId=='BlueGreenApp'].PhysicalResourceId" \
              --output text --region "$AWS_REGION")
        DG=$(aws cloudformation describe-stack-resources \
             --stack-name "$STACK_NAME" \
             --query "StackResources[?LogicalResourceId=='BlueGreenDG'].PhysicalResourceId" \
             --output text --region "$AWS_REGION")
        [[ "$APP" == "None" || -z "$APP" ]] && { echo "::error ::CodeDeploy application non trovata"; exit 1; }
        [[ "$DG"  == "None" || -z "$DG"  ]] && { echo "::error ::CodeDeploy deployment group non trovato"; exit 1; }
        echo "cd_app=$APP" >> "$GITHUB_OUTPUT"
        echo "cd_dg=$DG"  >> "$GITHUB_OUTPUT"
        echo "CodeDeploy Application: $APP"
        echo "Deployment Group:       $DG"

    #---------------------------------------------------------------
    # 8) Registra una nuova task‑definition
    #---------------------------------------------------------------
    - name: Register new task definition
      id: register
      env:
        AWS_REGION: ${{ env.AWS_REGION }}
        FAMILY:     ${{ steps.resolve.outputs.family }}
        IMAGE_TAG:  ${{ steps.build.outputs.tag }}
        ECR_REPO:   ${{ env.ECR_REPO }}
      run: |
        set -euo pipefail
        # Get current task definition
        aws ecs describe-task-definition \
            --task-definition "$FAMILY" \
            --region "$AWS_REGION" \
          | jq '.taskDefinition' > td-full.json
          
        # Print the full task definition for debugging
        echo "Original task definition:"
        cat td-full.json
        
        # Extract only the fields needed for register-task-definition
        jq '{
          family: .family,
          taskRoleArn: .taskRoleArn,
          executionRoleArn: .executionRoleArn,
          networkMode: .networkMode,
          containerDefinitions: .containerDefinitions,
          volumes: .volumes,
          placementConstraints: .placementConstraints,
          requiresCompatibilities: .requiresCompatibilities,
          cpu: .cpu,
          memory: .memory
        }' td-full.json > td-clean.json
        
        # Update the image in the container definitions
        jq --arg img "$ECR_REPO:$IMAGE_TAG" \
           '.containerDefinitions[0].image = $img' td-clean.json > new-td.json
           
        # Debug the new task definition
        echo "New task definition to register:"
        cat new-td.json
        
        # Register the new task definition
        REVISION_ARN=$(aws ecs register-task-definition \
            --cli-input-json file://new-td.json \
            --region "$AWS_REGION" \
            --query 'taskDefinition.taskDefinitionArn' \
            --output text)
            
        echo "Registered new task definition: $REVISION_ARN"
        echo "revision=$REVISION_ARN" >> "$GITHUB_OUTPUT"
    
    #---------------------------------------------------------------
    # 9) Avvia il deployment CodeDeploy con AppSpecContent
    #---------------------------------------------------------------
    - name: Create CodeDeploy deployment (AppSpecContent)
      env:
        AWS_REGION:   ${{ env.AWS_REGION }}
        APP_NAME:     ${{ steps.cd.outputs.cd_app }}
        DG_NAME:      ${{ steps.cd.outputs.cd_dg }}
        CLUSTER_NAME: ${{ steps.resolve.outputs.cluster_name }}
        SERVICE_NAME: ${{ steps.resolve.outputs.service_name }}
        REVISION_ARN: ${{ steps.register.outputs.revision }}
      run: |
        set -euo pipefail

        #############################################################
        # 9.1  Costruisci l’AppSpec (JSON “pretty”)
        #############################################################
        cat > appspec.json <<EOF
        {
          "version": "0.0",
          "Resources": [
            {
              "TargetService": {
                "Type": "AWS::ECS::Service",
                "Properties": {
                  "TaskDefinition": "$REVISION_ARN",
                  "LoadBalancerInfo": {
                    "ContainerName": "web",
                    "ContainerPort": 80
                  }
                }
              }
            }
          ]
        }
        EOF

        #############################################################
        # 9.2  Comprimi + quota l’AppSpec per metterlo in "content"
        #      jq -c   -> compatta il JSON
        #      jq -Rs. -> lo trasforma in stringa JSON escapata
        #############################################################
        APP_SPEC_STR=$(jq -c '.' appspec.json | jq -Rs .)

        #############################################################
        # 9.3  Crea il file create-deployment.json
        #############################################################
        cat > create-deployment.json <<EOF
        {
          "applicationName": "$APP_NAME",
          "deploymentGroupName": "$DG_NAME",
          "deploymentConfigName": "CodeDeployDefault.ECSLinear10PercentEvery1Minutes",
          "revision": {
            "revisionType": "AppSpecContent",
            "appSpecContent": {
              "content": $APP_SPEC_STR
            }
          }
        }
        EOF

        echo "===== create-deployment.json ====="
        cat create-deployment.json
        echo "================================="

        #############################################################
        # 9.4  Avvia il Blue/Green
        #############################################################
        aws deploy create-deployment \
          --cli-input-json file://create-deployment.json \
          --region "$AWS_REGION"
